package com.ibm.domino.osgi.debug.launch;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Properties;
import java.util.Set;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.pde.launching.IPDELauncherConstants;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;
import org.openntf.xsp.sdk.exceptions.AbortException;
import org.openntf.xsp.sdk.platform.INotesDominoPlatform;
import org.openntf.xsp.sdk.utils.StringUtil;

public class LaunchUtils {

	public static String getBundleSuffix(String id) {
		if ("org.eclipse.equinox.common".equals(id)) {
			return "@2:start";
		} else if ("org.eclipse.core.runtime".equals(id)) {
			return "@start";
		} else if ("org.eclipse.equinox.common".equals(id)) {
			return "@2:start";
		} else if ("org.eclipse.core.jobs".equals(id)) {
			return "@4:start";
		} else if ("org.eclipse.equinox.registry".equals(id)) {
			return "@4:start";
		} else if ("org.eclipse.equinox.preferences".equals(id)) {
			return "@4:start";
		}

		return "";
	}

	/**
	 * @param configuration
	 * @return
	 * @throws CoreException
	 */
	public static boolean isTargetPlatformPluginsEnabled(ILaunchConfiguration configuration) throws CoreException {
		String selectedTargetBundles = configuration.getAttribute(IPDELauncherConstants.TARGET_BUNDLES, (String) null);
		return selectedTargetBundles != null && selectedTargetBundles.length() > 0;
	}


	private static File getPDELaunchIni(AbstractDominoLaunchConfiguration dominoLaunch) throws IOException {
		String selectedProfile = dominoLaunch.getSelectedProfile();
		String workspacePath = dominoLaunch.getNotesDominoPlatform().getRemoteWorkspaceFolder(selectedProfile);
		
		final File dominoWorkspaceDir = new File(workspacePath);
		if (!dominoWorkspaceDir.exists() || !dominoWorkspaceDir.isDirectory()) {
			PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
				@Override
				public void run() {
					Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
					boolean bCreate = MessageDialog.openQuestion(shell, "Question",
							MessageFormat.format(
									"The directory \"{0}\" does not exist.\nThis may be because the OSGi configuration has never been run previously.\nWould you like to create it?",
									dominoWorkspaceDir.getAbsolutePath()));
					if (bCreate) {
						dominoWorkspaceDir.mkdirs();
					}
				}
			});
		}

		if (!dominoWorkspaceDir.exists() || !dominoWorkspaceDir.isDirectory()) {
			throw new AbortException();
		}
		return new File(dominoWorkspaceDir, "pde.launch.ini");
	}

	public static String createPDELaunchIni(AbstractDominoLaunchConfiguration dominoLaunch, ILaunchConfiguration configuration) throws IOException {
		File pdeLaunchIniFile = getPDELaunchIni(dominoLaunch);
		FileOutputStream fos = null;
		try {
			String configDir = getConfigDir(dominoLaunch, configuration);

			fos = new FileOutputStream(pdeLaunchIniFile);
			
			Properties props = new Properties();
			props.setProperty("configuration", dominoLaunch.getName());
			props.setProperty("osgi.configuration.area", configDir);
			props.store(fos, "Generated by OpenNTF XPages SDK");
		} finally {
			if (fos != null) {
				fos.close();
			}
		}
		
		return pdeLaunchIniFile.getAbsolutePath();
	}

	// XXX We receive the remote path and convert it to local 
	public static String toLocalBundleUrl(String remoteUrl, INotesDominoPlatform ndPlatform) {
		return remoteUrl;
	}
	
	// XXX We receive a path local to Domino, will convert it to a path remote to Domino
	public static String toRemotePath(String localPath, INotesDominoPlatform ndPlatform) {
		return localPath;
	}
	
	public static String getConfigDir(AbstractDominoLaunchConfiguration dominoLaunch, ILaunchConfiguration configuration) {
		// XXX Modify configuration area for Remote
		// The config dir is probably on the eclipse machine
		return dominoLaunch.getConfigDir(configuration).getAbsolutePath().replace('\\', '/');
	}

	public static Collection<String> populateBundleList(String osgiBundles, INotesDominoPlatform ndPlatform) {
		Set<String> bundles = new LinkedHashSet<String>();
		
		for(String osgiBundle: osgiBundles.split(",")) {
			// XXX Convert project bundles to the local format. They are in 'reference:file:...' format
			// incoming bundles are probably on Eclipse machine.
			bundles.add(osgiBundle);
		}
		
		return bundles;
	}

	/*
	 * Read all of the .link files - this will add the Upgrade Pack
	 * plugins to the config
	 */
	public static Collection<String> findLinkedRepos(File linksDir) {
		Collection<String> linkedRepos = new LinkedHashSet<String>();

		if (linksDir.exists() && linksDir.isDirectory()) {
			File[] links = linksDir.listFiles();
			
			if (links != null) {
				for (File link : links) {
					FileReader reader = null;

					try {
						reader = new FileReader(link);
						Properties linkProps = new Properties();
						linkProps.load(reader);
						String linkPath = StringUtil.prunePath(linkProps.getProperty("path"));
						
						if(!StringUtil.isEmpty(linkPath)) {
							linkedRepos.add(linkPath + "/eclipse");
						}
					} catch (Exception e) {
						e.printStackTrace(System.err);
					} finally {
						try {
							if(null!=reader) {
								reader.close();
							}
						} catch (IOException e) {}
					}
				}
			}
		}

		return linkedRepos;
	}

	public static void displayMessage(final boolean isError, final String title, String message, Object... args) {
		final String dialogMessage = MessageFormat.format(message, args);

		PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
			@Override
			public void run() {
				Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
				if(isError) {
					MessageDialog.openError(shell, title, dialogMessage);
				} else {
					MessageDialog.openInformation(shell, title, dialogMessage);
				}
			}
		});
	
	}
	
	
}
